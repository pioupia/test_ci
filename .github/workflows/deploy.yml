name: Build and Deploy Docker Image

on:
  workflow_dispatch:
    inputs:
      destination:
        description: "Destination to deploy the Docker image"
        default: "recette"
        type: choice
        options:
          - recette
          - prod
        required: true
      version:
        description: "Docker image version to build"
        required: true

jobs:
  installer:
    runs-on: ubuntu-latest
    steps:
      - name: Cache sshpass
        id: cache-sshpass
        uses: actions/cache@v4
        with:
          path: /usr/bin/sshpass
          key: ${{ runner.os }}-sshpass-binary

      - name: Install sshpass
        if: steps.cache-sshpass.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

  verify-arguments:
    runs-on: ubuntu-latest
    needs: installer
    steps:
      - name: Verify semver
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
        run: |
          sudo npm i -g semver
          semver "$NEW_VERSION" >/dev/null

      - name: Choosing env keys
        run: |
          echo "SSH_HOST=${{ github.event.inputs.destination == 'prod' && secrets.VPS_PROD_HOST || secrets.VPS_NPRD_HOST }}" >> "$GITHUB_ENV"
          echo "SSH_USER=${{ github.event.inputs.destination == 'prod' && secrets.VPS_PROD_USER || secrets.VPS_NPRD_USER }}" >> "$GITHUB_ENV"
          echo "SSH_PASSWORD=${{ github.event.inputs.destination == 'prod' && secrets.VPS_PROD_PASSWORD || secrets.VPS_NPRD_PASSWORD }}" >> "$GITHUB_ENV"

      - name: Remove existing sshpass
        run: |
          if [ -f /usr/bin/sshpass ]; then
              sudo rm /usr/bin/sshpass
          fi

      - name: Restore cached sshpass
        id: cache-sshpass-restore
        uses: actions/cache/restore@v4
        if: steps.cache-sshpass.outputs.cache-hit != 'true'
        with:
          path: /usr/bin/sshpass
          key: ${{ runner.os }}-sshpass-binary

      - name: Verify version logic
        env:
          DESTINATION: ${{ github.event.inputs.destination }}
          NEW_VERSION: ${{ github.event.inputs.version }}
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
          SSH_PASSWORD: ${{ env.SSH_PASSWORD }}
        run: |
          VERSIONS="$(/usr/bin/sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" $'docker images  | grep \'my-uuu/app-frontend-ssr\' | awk \'{ print $2 }\'')"
          while IFS= read -r VERSION; do
              if [ "$NEW_VERSION" = "$VERSION" ]; then
                  echo "Version $NEW_VERSION already exists"
                  exit 1
              fi
              if [ "$VERSION" = "latest" ]; then
                  continue
              fi
              if ! semver "$NEW_VERSION" -r ">$VERSION" 2>&1 >/dev/null; then
                  echo "Version $NEW_VERSION is lower or equal than the last version $VERSION"
                  exit 1
              fi
          done <<< "$VERSIONS"
          exit 0

  cleaning:
    runs-on: ubuntu-latest
    needs: [installer, verify-arguments]
    if: ${{ always() }}
    steps:
      - name: Cleanup
        id: cache-cleanup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          set +e
          gh cache delete "${{ runner.os }}-sshpass-binary"
          gh cache delete "${{ runner.os }}-docker_image"
