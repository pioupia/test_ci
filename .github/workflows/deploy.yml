name: Build and Deploy Docker Image

on:
  workflow_dispatch:
    inputs:
      destination:
        description: "Destination to deploy the Docker image"
        default: "recette"
        type: choice
        options:
          - recette
          - prod
        required: true
      version:
        description: "Docker image version to build"
        required: true

jobs:
  verify-arguments:
    runs-on: ubuntu-latest
    steps:
      - name: Verify semver
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
        run: |
          sudo npm i -g semver
          semver "$NEW_VERSION" >/dev/null

      - name: Save password
        id: save-password
        run: |
          echo "${{ github.event.inputs.destination == 'prod' && secrets.VPS_PROD_PASSWORD || secrets.VPS_NPRD_PASSWORD }}" > .password

      - name: Choosing env keys
        env:
          VPS_PROD_HOST: ${{ secrets.VPS_PROD_HOST }}
          VPS_PROD_USER: ${{ secrets.VPS_PROD_USER }}
          VPS_PROD_PASSWORD: ${{ secrets.VPS_PROD_PASSWORD }}
          VPS_NPRD_HOST: ${{ secrets.VPS_NPRD_HOST }}
          VPS_NPRD_USER: ${{ secrets.VPS_NPRD_USER }}
          VPS_NPRD_PASSWORD: ${{ secrets.VPS_NPRD_PASSWORD }}
          FIRST_SECRET: ${{ secrets.FIRST_SECRET }}
          SECOND_SECRET: ${{ secrets.SECOND_SECRET }}

        run: |
          if [ "${{ github.event.inputs.destination }}" == "prod" ]; then
            echo "SSH_HOST=$VPS_PROD_HOST" >> "$GITHUB_ENV"
            echo "SSH_USER=$VPS_PROD_USER" >> "$GITHUB_ENV"
            echo "SSH_CUSTOM=$FIRST_SECRET" >> "$GITHUB_ENV"
            echo "SSH_CUSTOM=$FIRST_SECRET" | tr -d 'E' >> double_password
            echo "THere we arrre"
          else
            echo "SSH_HOST=$VPS_NPRD_HOST" >> "$GITHUB_ENV"
            echo "SSH_USER=$VPS_NPRD_USER" >> "$GITHUB_ENV"
            echo "SSH_CUSTOM=$SECOND_SECRET" >> "$GITHUB_ENV"
            echo "SSH_CUSTOM=${{ env.SECOND_SECRET }}" | tr -d 'E' | base64 >> double_password
            echo "HEEEERE we arrre"
          fi

      - name: Verify version logic
        env:
          DESTINATION: ${{ github.event.inputs.destination }}
          NEW_VERSION: ${{ github.event.inputs.version }}
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
          SSH_PASSWORD: ${{ env.SSH_PASSWORD }}
          SSH_CUSTOM: ${{ env.SSH_CUSTOM }}
        run: |
          ssh -V
          cat double_password
          echo Here is ssh custom there: "$SSH_CUSTOM"
          VERSIONS="$(ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "docker images | grep 'my-uuu/app-frontend-ssr' | awk '{ print \$2 }'" < .password)"
          while IFS= read -r VERSION; do
              if [ "$NEW_VERSION" = "$VERSION" ]; then
                  echo "Version $NEW_VERSION already exists"
                  exit 1
              fi
              if [ "$VERSION" = "latest" ]; then
                  continue
              fi
              if ! semver "$NEW_VERSION" -r ">$VERSION" 2>&1 >/dev/null; then
                  echo "Version $NEW_VERSION is lower or equal than the last version $VERSION"
                  exit 1
              fi
          done <<< "$VERSIONS"
          exit 0

  cleaning:
    runs-on: ubuntu-latest
    needs: [verify-arguments]
    if: ${{ always() }}
    steps:
      - name: Cleanup
        id: cache-cleanup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          set +e
          gh cache delete "${{ runner.os }}-sshpass-binary"
          gh cache delete "${{ runner.os }}-docker_image"
